#include <opencv2/opencv.hpp>
#include <iostream>

using namespace cv;
using namespace std;

void displayImage(const Mat& image) {
    namedWindow("Image", WINDOW_AUTOSIZE);
    imshow("Image", image);
    waitKey(0);
    destroyWindow("Image");
}

void applyGrayscale(Mat& image) {
    cvtColor(image, image, COLOR_BGR2GRAY);
}

void applyBlur(Mat& image, int ksize = 5) {
    blur(image, image, Size(ksize, ksize));
}

void applySharpen(Mat& image) {
    Mat kernel = (Mat_<float>(3,3) << 
                 0, -1, 0, 
                -1, 5,-1, 
                 0, -1, 0);
    filter2D(image, image, image.depth(), kernel);
}

void adjustBrightnessContrast(Mat& image, int brightness, int contrast) {
    for (int y = 0; y < image.rows; y++) {
        for (int x = 0; x < image.cols; x++) {
            for (int c = 0; c < image.channels(); c++) {
                image.at<Vec3b>(y,x)[c] = saturate_cast<uchar>(contrast*0.01*(image.at<Vec3b>(y,x)[c]) + brightness);
            }
        }
    }
}

void cropImage(Mat& image, Rect roi) {
    image = image(roi);
}

void resizeImage(Mat& image, int width, int height) {
    resize(image, image, Size(width, height));
}

int main() {
    string filename;
    cout << "Enter the path to the image: ";
    cin >> filename;

    Mat image = imread(filename);
    if (image.empty()) {
        cout << "Could not open or find the image!" << endl;
        return -1;
    }

    int choice;
    do {
        cout << "\nImage Processing Tool\n";
        cout << "1. Display Image\n";
        cout << "2. Apply Grayscale Filter\n";
        cout << "3. Apply Blur Filter\n";
        cout << "4. Apply Sharpen Filter\n";
        cout << "5. Adjust Brightness and Contrast\n";
        cout << "6. Crop Image\n";
        cout << "7. Resize Image\n";
        cout << "8. Save Image\n";
        cout << "9. Exit\n";
        cout << "Enter your choice: ";
        cin >> choice;

        switch (choice) {
            case 1:
                displayImage(image);
                break;
            case 2:
                applyGrayscale(image);
                cout << "Grayscale filter applied.\n";
                break;
            case 3:
                applyBlur(image);
                cout << "Blur filter applied.\n";
                break;
            case 4:
                applySharpen(image);
                cout << "Sharpen filter applied.\n";
                break;
            case 5: {
                int brightness, contrast;
                cout << "Enter brightness (-255 to 255): ";
                cin >> brightness;
                cout << "Enter contrast (0 to 200): ";
                cin >> contrast;
                adjustBrightnessContrast(image, brightness, contrast);
                cout << "Brightness and contrast adjusted.\n";
                break;
            }
            case 6: {
                int x, y, width, height;
                cout << "Enter x, y, width, height for cropping: ";
                cin >> x >> y >> width >> height;
                cropImage(image, Rect(x, y, width, height));
                cout << "Image cropped.\n";
                break;
            }
            case 7: {
                int width, height;
                cout << "Enter new width and height: ";
                cin >> width >> height;
                resizeImage(image, width, height);
                cout << "Image resized.\n";
                break;
            }
            case 8: {
                string saveFilename;
                cout << "Enter the path to save the image: ";
                cin >> saveFilename;
                imwrite(saveFilename, image);
                cout << "Image saved.\n";
                break;
            }
            case 9:
                cout << "Exiting the tool.\n";
                break;
            default:
                cout << "Invalid choice. Please try again.\n";
        }
    } while (choice != 9);

    return 0;
}
